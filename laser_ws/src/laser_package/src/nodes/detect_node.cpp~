#include "../../include/detect.h"

std::vector<float> detectTargets(std::vector<float> ranges);

class SubscribeAndPublish
{
public:
    SubscribeAndPublish()
 	{
		ROS_INFO("Constructing SAP");
		laser_sub = n.subscribe<sensor_msgs::LaserScan>("/scan",1000,&SubscribeAndPublish::laserCallBack,this);
		target_pub = n.advertise<sensor_msgs::LaserScan>("/targets",1000); //publish targets to new topic
		std::vector<float> initial_target_vector (682);
        std::vector<float> filtered_ranges (682);
		scan_counter = 0;
	}
	int scan_counter;//NEW CODE
	std::vector<float> initial_target_vector;//NEW CODE
	std::vector<float> filtered_ranges;
	sensor_msgs::LaserScan targets_msg;

	void laserCallBack(const sensor_msgs::LaserScan::ConstPtr& msg)
	{ 
        targets_msg = *msg;
		filtered_ranges = detectTargets(msg->ranges);
		targets_msg.ranges = filtered_ranges;
		if(scan_counter>10)target_pub.publish(targets_msg);//NEW CODE ADDED CONITIONAL
		if(scan_counter<10)scan_counter++;//NEW CODE
	}
private:
   
    ros::NodeHandle n; 
    ros::Publisher target_pub;
    ros::Subscriber laser_sub;

};//End of class SubscribeAndPublish



int main(int argc, char **argv)
{
	//Initiate ROS
	ros::init(argc, argv, "detect_node");

	//Create an object of class SubscribeAndPublish that will take care of everything
	SubscribeAndPublish SAPDetect;
	ros::spin();

	return 0;
}


