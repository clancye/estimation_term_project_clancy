cmake_minimum_required(VERSION 2.8.3)
project(laser_package)
set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")


## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  sensor_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()



## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   state.msg
#   Message1.msg
#   Message2.msg
 )

## Generate services in the 'srv' folder
 add_service_files(
    FILES
	update_imm_filter.srv
	add_filter.srv
	update_filter_priors.srv
#   Service1.srv
#   Service2.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
  generate_messages(
    DEPENDENCIES
    std_msgs
    sensor_msgs
    laser_package
  )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
   INCLUDE_DIRS include
#  LIBRARIES laser_package
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(laser_package
#   src/${PROJECT_NAME}/laser_package.cpp
# )

## Declare a cpp executable
# add_executable(laser_package_node src/laser_package_node.cpp)
#add_executable(KalmanFilter_node src/nodes/KalmanFilter_node.cpp src/drivers/KalmanFilter.cpp src/drivers/Filter.cpp)
#target_link_libraries(KalmanFilter_node ${catkin_LIBRARIES})
#add_dependencies(KalmanFilter_node laser_package_generate_messages_cpp)

#add_executable(ExtendedKalmanFilter_node src/nodes/ExtendedKalmanFilter_node.cpp src/drivers/ExtendedKalmanFilter.cpp src/drivers/Filter.cpp)
#target_link_libraries(ExtendedKalmanFilter_node ${catkin_LIBRARIES})
#add_dependencies(ExtendedKalmanFilter_node laser_package_generate_messages_cpp)

add_executable(Estimator_node src/Estimator_node.cpp src/Estimator_node.cpp src/ExtendedKalmanFilter.cpp src/KalmanFilter.cpp src/Filter.cpp)
target_link_libraries(Estimator_node ${catkin_LIBRARIES})
add_dependencies(Estimator_node laser_package_generate_messages_cpp)

#add_executable(imm_node src/nodes/imm_node.cpp src/drivers/imm_driver.cpp)
#target_link_libraries(imm_node ${catkin_LIBRARIES})
#add_dependencies(imm_node laser_package_generate_messages_cpp)

#add_executable(simulate_node src/nodes/simulate_node.cpp src/drivers/simulate_driver.cpp)
#target_link_libraries(simulate_node ${catkin_LIBRARIES})
#add_dependencies(simulate_node laser_package_generate_messages_cpp)

#add_executable(filter_node src/nodes/filter_node.cpp src/drivers/filter_driver.cpp)
#target_link_libraries(filter_node ${catkin_LIBRARIES})
#add_dependencies(filter_node laser_package_generate_messages_cpp)

#add_executable(detect_node src/nodes/detect_node.cpp src/drivers/detect_driver.cpp)
#target_link_libraries(detect_node ${catkin_LIBRARIES})
#add_dependencies(detect_node laser_package_generate_messages_cpp)

#add_executable(client_detect_node src/nodes/client_detect_node.cpp src/drivers/detect_driver.cpp)
#target_link_libraries(client_detect_node ${catkin_LIBRARIES})
#add_dependencies(client_detect_node laser_package_generate_messages_cpp)



## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(laser_package_node laser_package_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(laser_package_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS laser_package laser_package_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_laser_package.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

